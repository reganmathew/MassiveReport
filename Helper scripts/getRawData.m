%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/reganmathew/Dropbox/Research/tLab/Programming/Inquisit_Matlab_workFlow/Gallagher2020_data/Exp1_FixedWords_v1_raw.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2020/05/01 11:42:42

%% Initialize variables.
filename = 'Gallagher2020_data/Monkey_Data.csv';
delimiter = ',';

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%*s%s%s%s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%s%*s%s%*s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string',  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[4,6]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [4]);
rawStringColumns = string(raw(:, [1,2,3,5,7,8,9]));


%% Exclude rows with non-numeric cells
I = ~all(cellfun(@(x) (isnumeric(x) || islogical(x)) && ~isnan(x),rawNumericColumns),2); % Find rows with non-numeric cells
rawNumericColumns(I,:) = [];
rawStringColumns(I,:) = [];

%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
for catIdx = [2,3,4,5,6,7]
    idx = (rawStringColumns(:, catIdx) == "<undefined>");
    rawStringColumns(idx, catIdx) = "";
end

%% Create output variable
rawData = table;
rawData.subject = rawStringColumns(:, 1);
rawData.blockcode = categorical(rawStringColumns(:, 2));
rawData.trialcode = categorical(rawStringColumns(:, 3));
rawData.latency = cell2mat(rawNumericColumns(:, 1));
rawData.response = categorical(rawStringColumns(:, 4));
rawData.valuesimageName = cell2mat(rawNumericColumns(:, 2));
rawData.wordNumber = categorical(rawStringColumns(:, 5));
rawData.imageNumber = categorical(rawStringColumns(:, 6));
rawData.word = categorical(rawStringColumns(:, 7));

rawData = movevars(rawData, 'response', 'After', 'word');

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData row regexstr result numbers invalidThousandsSeparator thousandsRegExp rawNumericColumns rawStringColumns I J K catIdx idx;